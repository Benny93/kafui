version: '3.8'

services:
  # Kafka test environment for integration testing
  zookeeper-test:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper-test
    container_name: kafui-test-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafui-test-network

  kafka-test:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka-test
    container_name: kafui-test-kafka
    depends_on:
      - zookeeper-test
    ports:
      - "9092:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-test:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-test:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: localhost
    networks:
      - kafui-test-network

  # Schema Registry for testing schema-related functionality
  schema-registry-test:
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: schema-registry-test
    container_name: kafui-test-schema-registry
    depends_on:
      - kafka-test
    ports:
      - "8085:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry-test
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-test:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - kafui-test-network

  # Test data producer to create test topics and messages
  kafka-test-producer:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka-test-producer
    container_name: kafui-test-producer
    depends_on:
      - kafka-test
    command: >
      bash -c "
        # Wait for Kafka to be ready
        echo 'Waiting for Kafka to be ready...'
        cub kafka-ready -b kafka-test:29092 1 40
        
        # Create test topics
        echo 'Creating test topics...'
        kafka-topics --create --topic test-topic-1 --partitions 3 --replication-factor 1 --if-not-exists --bootstrap-server kafka-test:29092
        kafka-topics --create --topic test-topic-2 --partitions 2 --replication-factor 1 --if-not-exists --bootstrap-server kafka-test:29092
        kafka-topics --create --topic test-topic-empty --partitions 1 --replication-factor 1 --if-not-exists --bootstrap-server kafka-test:29092
        
        # Produce test messages
        echo 'Producing test messages...'
        echo 'key1:message1' | kafka-console-producer --topic test-topic-1 --bootstrap-server kafka-test:29092 --property parse.key=true --property key.separator=:
        echo 'key2:message2' | kafka-console-producer --topic test-topic-1 --bootstrap-server kafka-test:29092 --property parse.key=true --property key.separator=:
        echo 'key3:message3' | kafka-console-producer --topic test-topic-2 --bootstrap-server kafka-test:29092 --property parse.key=true --property key.separator=:
        
        # Create consumer groups
        echo 'Creating consumer groups...'
        kafka-console-consumer --topic test-topic-1 --bootstrap-server kafka-test:29092 --group test-group-1 --from-beginning --max-messages 1 > /dev/null
        kafka-console-consumer --topic test-topic-2 --bootstrap-server kafka-test:29092 --group test-group-2 --from-beginning --max-messages 1 > /dev/null
        
        echo 'Test environment setup complete!'
        
        # Keep container running for tests
        tail -f /dev/null
      "
    networks:
      - kafui-test-network

networks:
  kafui-test-network:
    driver: bridge